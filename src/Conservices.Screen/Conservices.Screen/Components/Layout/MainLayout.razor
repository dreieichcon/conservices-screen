@using System.Text
@using Conservices.Screen.Interfaces.Repositories
@using Conservices.Screen.Interfaces.Timers
@inherits LayoutComponentBase
@inject ITimerService TimerService
@inject ISunRepository SunRepository

<style>
    @_theme;
</style>

<div class="page">
    <div class="main-view">
        @Body
    </div>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code{

    private MarkupString _theme;

    protected override async Task OnInitializedAsync()
    {
        _theme = await GetTheme();
        TimerService.TickFiveMinutes += async(_, _) => await OnFiveMinutesElapsed();
    }

    private async Task OnFiveMinutesElapsed()
    {
        _theme = await GetTheme();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<MarkupString> GetTheme()
    {
        var now = TimeOnly.FromDateTime(DateTime.UtcNow);
        var sunState = await SunRepository.GetSunStateAsync();

        if (now >= sunState.Dusk || now < sunState.Sunrise)
            return CompileThemeString(DarkTheme);

        return CompileThemeString(LightTheme);
    }

    private MarkupString CompileThemeString(Dictionary<string, string> themeValues)
    {
        var sb = new StringBuilder();

        sb.AppendLine(":root {");

        foreach (var kvp in themeValues)
        {
            sb.AppendLine($"{kvp.Key}: {kvp.Value};");
        }

        sb.Append("}");

        return (MarkupString)sb.ToString();
    }

    private Dictionary<string, string> LightTheme = new()
    {
        { "--background", "#FFFFFF" },
        { "--paper", "#E0E0E0" },
        { "--paper-highlight", "#EBEBEB"},
        { "--paper-border", "#c2c2c2"},
        { "--border-alpha", "#00000044"},
        { "--foreground", "#323031" },
        { "--primary", "#0892A5"},
    };

    private Dictionary<string, string> DarkTheme = new()
    {
        { "--background", "#222222" },
        { "--paper", "#333333" },
        { "--paper-highlight", "#555555"},
        { "--paper-border", "#666666" },
        { "--border-alpha", "#FFFFFF44"},
        { "--foreground", "#FFFF" },
        { "--primary", "#0892A5"},
    };

}