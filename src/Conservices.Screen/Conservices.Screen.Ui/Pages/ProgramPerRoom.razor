@page "/event/{EventId}/program/rooms"
@using Conservices.Screen.Interfaces.Conservices
@using Conservices.Screen.Interfaces.Timers
@using Conservices.Screen.Models.Program

@inject IProgramService ProgramService
@inject ITimerService TimerService

<div class="content-wrapper">
    <div class="paper h2 page-title">
        Programm√ºbersicht
    </div>
    <div class="display-wrapper">
        @foreach (var item in ProgramItems.Where(x => x.Table != null).GroupBy(x => x.Table!.Name).OrderBy(x => x.Key))
        {
            <div class="room-view paper mb-3 el-1">
                <div class="p-3 h4" style="border-bottom: 1px solid var(--primary);">
                    @item.Key
                </div>
                <CurrentItemSmall CurrentItem="@GetCurrentInRoom(item.Key)"/>
                <NextItemSmall NextItem="@GetNextInRoom(item.Key)"/>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public required string EventId { get; set; }

    private IEnumerable<ProgramItem> ProgramItems { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await ReloadProgramItems();
        TimerService.TickOneMinute += async (_, _) => await ReloadProgramItems();
    }

    private async Task ReloadProgramItems()
    {
        ProgramItems = (await ProgramService.GetAllAsync(EventId)).Where(x => x.Start.Add(x.Duration) >= DateTime.UtcNow);
        await InvokeAsync(StateHasChanged);
    }

    private ProgramItem? GetCurrentInRoom(string name)
    {
        return ProgramItems.FirstOrDefault(x => x.Table?.Name == name && DateTime.UtcNow > x.Start && DateTime.UtcNow < x.End);
    }

    private ProgramItem? GetNextInRoom(string name)
    {
        return ProgramItems.FirstOrDefault(x => x.Table?.Name == name && x.Start > DateTime.UtcNow);
    }
}