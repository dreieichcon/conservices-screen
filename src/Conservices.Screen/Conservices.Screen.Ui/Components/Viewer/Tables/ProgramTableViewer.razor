@using Conservices.Screen.Interfaces.Conservices
@using Conservices.Screen.Ui.Components.Viewer.Core
@using Conservices.Screen.Models.Program
@using Conservices.Screen.Ui.Components.Viewer.Cells
@using Conservices.Screen.Util

@inject IProgramService ProgramService

@inherits AbstractTableViewer<ProgramItem>

<TableViewer Class="@Class">
    <TableHead>
        <tr>
            <HeaderCell Width="55" PadLeft="1">Titel</HeaderCell>
            <HeaderCell>Typ</HeaderCell>
            <HeaderCell PadLeft="3">Ort</HeaderCell>
            <HeaderCell>Startzeit</HeaderCell>
        </tr>
    </TableHead>
    <TableBody>
        @foreach (var (item, index) in Items.WithIterator())
        {
            <tr id="row-@index" class="@GetRowClass(index, Items.Count())">
                <TitleCellWithAge MinimumAge="@item.MinimumAge" Title="@item.Title"/>
                <LabelCell Labels="@item.Labels"/>
                <TableCell Tables="@item.Tables"/>
                <StartTimeCell StartTimeUtc="@item.Start" IsOnlyOneDay="@IsOnlyOneDay()"/>
            </tr>  
        }
    </TableBody>
</TableViewer>

@code {

    protected override async Task ReloadItems()
    {
        Items = (await ProgramService.GetAllAsync(EventId)).Where(x => x.Start > DateTime.UtcNow);
    }
    
    [Parameter]
    public string Class { get; set; } = string.Empty;
    
}