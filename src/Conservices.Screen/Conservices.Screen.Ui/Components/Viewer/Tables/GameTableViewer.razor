@using Conservices.Screen.Interfaces.Conservices
@using Conservices.Screen.Models.Games
@using Conservices.Screen.Ui.Components.Viewer.Core
@using Conservices.Screen.Ui.Components.Viewer.Cells
@using Conservices.Screen.Util

@inject IGameService GameService

@inherits AbstractTableViewer<Game>

<TableViewer>
    <TableHead>
        <tr>
            <HeaderCell Width="30" PadLeft="1" Small="true">Titel</HeaderCell>
            <HeaderCell Width="14" Small="true">System</HeaderCell>
            <HeaderCell Width="7" Small="true">Spieler</HeaderCell>
            <HeaderCell Width="10" Small="true">Leiter</HeaderCell>
            <HeaderCell Small="true">Ort</HeaderCell>
            <HeaderCell Width="8" Small="true">Dauer</HeaderCell>
            <HeaderCell Small="true">Start</HeaderCell>
        </tr>
    </TableHead>
    <TableBody>
        @foreach (var (item, index) in Items.WithIterator())
        {
            <tr id="row-@index" class="@GetRowClass(index, Items.Count())">
                <TitleCellWithAge MinimumAge="@item.AgeMin" Title="@item.Title"/>
                <SystemCell System="@item.System" Version="@item.SystemVersion"/>    
                <FreeSeatsCell Max="@item.PlayerMax" Current="@item.Players.Count"/>
                <GameMasterCell User="@item.GameMaster" Alias="@item.AliasGameMaster"/>
                <TableCell Tables="@item.Tables"/>
                <DurationCell Duration="@item.Duration"/>
                <StartTimeCell StartTimeUtc="@item.Start" IsOnlyOneDay="@IsOnlyOneDay()"/>
            </tr>  
        }
    </TableBody>
</TableViewer>

@code {

    
    [Parameter]
    public string? Building { get; set; }
    
    protected override async Task ReloadItems()
    {
        var items = (await GameService.GetAllAsync(EventId)).Where(x => x.Start > DateTime.UtcNow);

        if (Building != null)
            items = items.Where(x => x.Tables.Any(t => t.Location.Building == Building));

        Items = items;
    }
    

    
    
}