@using Conservices.Screen.Interfaces.Conservices
@using Conservices.Screen.Interfaces.Display
@using Conservices.Screen.Interfaces.Timers
@using Conservices.Screen.Models.Misc
@using Conservices.Screen.Models.Program
@using Conservices.Screen.Util
@using Microsoft.JSInterop
@inject IDisplaySyncService DisplaySyncService
@inject ITimerService TimerService
@inject IProgramService ProgramService
@inject IJSRuntime JsRuntime

<div class="d-flex flex-grow-1 flex-column table-view paper-nopad">
    <table>
        <thead class="el-1">
        <tr>
            <th class="col-title">Titel</th>
            <th class="col-type">Typ</th>
            <th class="col-place">Ort</th>
            <th class="">Startzeit</th>
        </tr>
        </thead>
        @foreach (var (item, index) in ProgramItems.WithIterator())
        {
            <tr id="row-@index" class="@GetRowClass(index)">
                <td class="td-size td-title">
                    <div class="d-flex flex-row justify-content-between w-100">
                        <div class="title-container">@item.Title</div>
                        <div class="age-container">
                            @switch (item.MinimumAge)
                            {
                                case >= 18:
                                    <div class="age age-18">
                                        <div class="rotate-back">
                                            18
                                        </div>
                                    </div>
                                    break;

                                case >= 16:
                                    <div class="age age-16">
                                        <div class="rotate-back">
                                            16
                                        </div>
                                    </div>
                                    break;
                            }
                        </div>
                    </div>
                </td>
                <td class="td-size td-label">
                    <div class="td-text-large">
                        @item.Label?.Name
                    </div>
                </td>
                <td class="td-size td-place">
                    <div class="d-flex flex-row-reverse justify-content-between w-100 align-items-center h-100">
                        <div class="td-text-large mw-75 w-75">
                            @item.Table?.Name
                        </div>
                        <div class="flex-lg-row">
                            @if (item.Table is { Accessible: true })
                            {
                                <div class="wheelchair">
                                    <RadzenIcon Icon="Accessible_Forward" Style="font-size: 3rem;"/>
                                </div>
                            }
                        </div>
                    </div>
                </td>
                <td class="td-size td-time">
                    <div class="d-flex flex-column">
                        <div class="time-start">
                            @if (ProgramItems.GroupBy(x => x.Start.Day)
                                         .Count() == 1)
                            {
                                @item.Start.ToLocalTime().ToString("HH:mm")
                            }
                            else
                            {
                                @item.Start.ToLocalTime().DayAndTime()
                            }
                        </div>
                        <div class="time-delta">
                            @item.Start.TimeDelta()
                        </div>
                    </div>
                </td>
            </tr>
        }
    </table>

</div>

<script>
    window.scrollToElement = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });
        }
    };
</script>

@code {

    [Parameter]
    public required string EventId { get; set; }

    private IEnumerable<ProgramItem> ProgramItems { get; set; } = [];

    private string GetRowClass(int index)
    {
        if (index == DisplaySyncService.DisplayIndex)
        {
            return "row-style row-active el-4";
        }

        return "row-style row-inactive";
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadProgramItems();
        TimerService.TickPage += async (_, _) => await ReloadProgramItems();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReloadProgramItems()
    {
        ProgramItems = (await ProgramService.GetAllAsync(EventId)).Where(x => x.Start > DateTime.UtcNow);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            DisplaySyncService.DisplayChanged += async (_, _) => await ScrollToActiveRow();
    }

    private async Task ScrollToActiveRow()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("scrollToElement", $"row-{DisplaySyncService.DisplayIndex}");
        }
        catch
        {
            // do nothing
        }

        await InvokeAsync(StateHasChanged);
    }

}